Static Keyword in C#
  Why do we need Static Keyword in C#?
    If you ask this question to any developers, they most probably answer you that the static keyword is used in Factory Design Pattern, Singleton Design Pattern as well as used for data sharing, etc. But I think, the static keyword 
    is used for three basic purposes. And in this article, we will discuss these three purposes in detail.

  How is the Static Class Instantiated in C#?
    We cannot apply any OOPs principles to the static class like inheritance, polymorphism, encapsulation, and abstraction. But in the end, it is a class. And at least to use a class it has to be instantiated. Why because once it is
    instantiated. then only the static members get memory allocation. Until and unless the memory is not allocated, we cannot access them. So, if the static class is not instantiated then we cannot invoke the methods and properties 
    that are present inside the static class. Now let us see how the instantiation takes place internally of a static class i.e. in our example, it is the CommonTask class.
    The CLR (Common Language Runtime) internally will create only one instance of the CommonTask class irrespective of how many times they called from the Customer and CountryMaster class. And it is going to be created for the first 
    time when we use consume the CommonTask class.
    Due to the single instance behavior, the static class is also going to be used to share the common data.