User Input and Output in C#
  Console Class in C#
    One really useful class that handles input from a user is called the Console class. Console class is present in the “System” namespace.
    So, first, we import this System namespace into our program. It also converts the Bytes (from the input stream) into characters using the platform’s default charset.
    To use the Console class, you need to reference it in your code. This is done with the keyword using.
    using System;
    The using System; statement needs to go just above the Class statement or above namespace: The Syntax is given below.
     using System;
     namespace FirstProgram
     {
         class Program
         {
              static void Main(string[] args)
              {
              }
         }
     }
    OR 
     namespace FirstProgram
     {
        using System;
        class Program
        {
            static void Main(string[] args)
            {
            }
        }
     }

  Difference between WriteLine() and Write() method of Console Class in C#
    The main difference between WriteLine() and Write() method of Console Class in C# is that the Write() method only prints the string provided to it,
    while the WriteLine() method prints the string and moves to the start of the next line as well. Let us see an example to understand the difference between
    WriteLine() and the Write() method.

  Printing Variables and Literals using WriteLine() and Write() Method in C#
    The WriteLine() and Write() method of the Console class in C# can also be used to print variables and literals.

  Combining two strings using the + operator and printing them in C#
    Strings can also be combined or concatenated using the + operator while printing inside the WriteLine() and Write() Method in C#.

  Printing concatenated string using Formatted String in C#
    A better alternative for printing concatenated strings is using a formatted string instead of the + Operator in C#. In the case of formatted strings,
    we need to use placeholders for variables. 
    For example, The following line,
    Console.WriteLine(“Number = ” + number);
    can be replaced as,
    Console.WriteLine(“Number = {0}”, number);
    Here, {0} is the placeholder for the variable number which will be replaced by the value of the number. Since only one variable is used so there is only one placeholder.
    Multiple variables can be used in the formatted string. 

  User Input in C#
    In C#, the simplest method to get input from the user is by using the ReadLine() method of the Console class. However, Read() and ReadKey() are also available for getting
    input from the user. They are also included in the Console class. The most important thing is all these three methods are static methods of the Console class, 
    and hence we can call these methods using the class name.

  Difference between ReadLine(), Read() and ReadKey() methods in C#:
    The difference between ReadLine(), Read() and ReadKey() method in C# are as follows:
    1) ReadLine(): The ReadLine() method of Console class in C# reads the next line of input from the standard input stream. It returns the same string.
    2) Read(): The Read() method of Console class in C# reads the next character from the standard input stream. It returns the ASCII value of the character.
    3) ReadKey(): The ReadKey() method of the Console class in C# obtains the next key pressed by the user. This method is usually used to hold the screen until the user press a key.

    ReadKey() (returns a character): reads only one single character from the standard input stream or command line. Usually used when you’re giving options to the user in the console
    to select from, such as select A, B, or C. Another prominent example is Press Y or n to continue.
   
    ReadLine() (returns a string): or Console.Readline() reads a single line from the standard input stream or the command line. As an example, it can be used to ask the user to enter
    their name or age. It reads all the characters till we press enter.
   
    Read() (returns an int): or Console.Read() reads only one single character from the standard input stream. Similar to ReadKey except that it returns an integer. It returns the next
    character from the input stream, or returns (-1) if there is no more character to be read.

    Note: The Console.Read() reads only the next character from standard input and Console.ReadLine() reads the next line of characters from the standard input stream.
    Standard input in the case of Console Application is input from the user typed words in the console UI of your application.

  Reading Integer and floating Numbers (Numeric Values)
    In C#, it is very easy to read a character or string. All we need to do is call the corresponding methods as required like Read, ReadKey, and ReadLine.
    But it is not that straightforward while read the numeric values. Here, we will use the same ReadLine() method we used for getting string values.
    But since the ReadLine() method receives the input as a string, we need to typecast it into an integer or floating-point type as per our requirement.
    The simplest approach for converting user input to integer or floating-point type is by using the methods of the Convert class.

  