Operators in C#
  
  What are Operators in C#?
    Operators in C# are symbols that are used to perform operations on operands. For example, consider the expression 2 + 3 = 5, here 2 and 3 are operands, 
    and + and = are called operators. So, the Operators in C# are used to manipulate the variables and values in a program.

  Types of Operators in C#:
    1) Arithmetic Operators
    2) Relational Operators
    3) Logical Operators
    4) Bitwise Operators
    5) Assignment Operators
    6) Unary Operators or
    7) Ternary Operator or Conditional Operator

    In C#, the Operators can also be categorized based on the Number of Operands:
    1) Unary Operator: The Operator that requires one operand (variable or value) to perform the operation is called Unary Operator.
    2) Binary Operator: Then Operator that requires two operands (variables or values) to perform the operation is called Binary Operator.
    3) Ternary Operator: The Operator that requires three operands (variables or values) to perform the operation is called Ternary Operator. The Ternary
       Operator is also called Conditional Operator.

    For a better understanding of the different types of operators supported in C# Programming Language, please have a look at the below image.
      1) Binary Operator: +,-,*,/,% (Arithmetic Operators)
                          <,<=,>,>=,==,!= (Relational Operators)
                          &&,||,! (Logical Operators)
                          &,|,<<,>>,~,^ (Bitwise Operator)
                          =,+=,-+,*=,/=,%= (Assignment Operator)
      2) Unary Operator: ++,-- (Unary Operator)
      3) Ternary Operator: ?: (Ternary Operator or Conditional Operator )

  Assignment Operator in C#
    The Arithmetic Operators in C# are used to perform arithmetic/mathematical operations like addition, subtraction, multiplication, division, etc. on operands.
    
    1) Addition Operator (+):
       The + operator adds two operands. As this operator works with two operands, so, this + (plus) operator belongs to the category of the binary operator.
       The + Operator adds the left-hand side operand value with the right-hand side operand value and returns the result. For example:
       int a=10;
       int b=5;
       int c = a+b; //15, Here, it will add the a and b operand values i.e. 10 + 5
    2) Subtraction Operator (-):
       The – operator subtracts two operands. As this operator works with two operands, so, this – (minus) operator belongs to the category of the binary
       operator. The Minus Operator substracts the left-hand side operand value from the right-hand side operand value and returns the result. 
       For example:
       int a=10;
       int b=5;
       int c = a-b; //5, Here, it will subtract b from a i.e. 10 – 5
    3) Multiplication Operator (*):
       The * (Multiply) operator multiplies two operands. As this operator works with two operands, so, this * (Multiply) operator belongs to the category
       of the binary operator. The Multiply Operator multiplies the left-hand side operand value with the right-hand side operand value and returns the 
       result. For example:
       int a=10;
       int b=5;
       int c=a*b; //50, Here, it will multiply a with b i.e. 10 * 5
    4) Division Operator (/):
       The / (Division) operator divides two operands. As this operator works with two operands, so, this / (Division) operator belongs to the category of
       the binary operator. The Division Operator divides the left-hand side operand value with the right-hand side operand value and returns the result. 
       For example: 
       int a=10;
       int b=5;
       int c=a/b; //2, Here, it will divide 10 / 5
    5) Modulus Operator (%):
       The % (Modulos) operator returns the remainder when the first operand is divided by the second. As this operator works with two operands, so, this %
       (Modulos) operator belongs to the category of the binary operator. For example:
       int a=10;
       int b=5;
       int c=a%b; //0, Here, it will divide 10 / 5 and it will return the remainder which is 0 in this case

  Assignment Operators in C#
    The Assignment Operators in C# are used to assign a value to a variable. The left-hand side operand of the assignment operator is a variable and the
    right-hand side operand of the assignment operator can be a value or an expression that must return some value and that value is going to assign to the
    left-hand side variable.
    The most important point that you need to keep in mind is that the value on the right-hand side must be of the same data type as the variable on the
    left-hand side else you will get a compile-time error. The different Types of Assignment Operators supported in the C# language are as follows:
      1) Simple Assignment (=):
         This operator is used to assign the value of the right-hand side operand to the left-hand side operand i.e. to a variable. 
         For example:
         int a=10;
         int b=20;
         char ch = ‘a’;
         a=a+4; //(a=10+4)
         b=b-4; //(b=20-4)
      2) Add Assignment (+=):
         This operator is the combination of + and = operators. It is used to add the left-hand side operand value with the right-hand side operand value and then assign the result to the left-hand side variable.
         For example:
         int a=5;
         int b=6;
         a += b; //a=a+b; That means (a += b) can be written as (a = a + b)
      3) Subtract Assignment (-=):
         This operator is the combination of – and = operators. It is used to subtract the right-hand side operand value from the left-hand side operand value and then assign the result to the left-hand side variable. 
         For example:
         int a=10;
         int b=5;
         a -= b; //a=a-b; That means (a -= b) can be written as (a = a – b)
      4) Multiply Assignment (*=):
         This operator is the combination of * and = operators. It is used to multiply the left-hand side operand value with the right-hand side operand value and then assign the result to the left-hand side variable. 
         For example:
         int a=10;
         int b=5;
         a *= b; //a=a*b; That means (a *= b) can be written as (a = a * b)
      5) Division Assignment (/=):
         This operator is the combination of / and = operators. It is used to divide the left-hand side operand value with the right-hand side operand value and then assign the result to the left-hand side variable. 
         For example:
         int a=10;
         int b=5;
         a /= b; //a=a/b; That means (a /= b) can be written as (a = a / b)
      6) Modulus Assignment (%=):
         This operator is the combination of % and = operators. It is used to divide the left-hand side operand value with the right-hand side operand value and then assigns the remainder of this division to the left-hand side variable. 
         For example:
         int a=10;
         int b=5;
         a %= b; //a=a%b; That means (a %= b) can be written as (a = a % b)

  Relational Operators in C#:
    The Relational Operators in C# are also known as Comparison Operators. It determines the relationship between two operands and returns the Boolean
    results, i.e. true or false after the comparison. The Different Types of Relational Operators supported by C# are as follows.
      1) Equal to (==):
        This Operator is used to return true if the left-hand side operand value is equal to the right-hand side operand value.
        For example, 5==3 is evaluated to be false. So, this Equal to (==) operator will check whether the two given operand values are equal or not.
        If equal returns true else returns false.

     2) Not Equal to (!=):
        This Operator is used to return true if the left-hand side operand value is not equal to the right-hand side operand value.
        For example, 5!=3 is evaluated to be true. So, this Not Equal to (!=) operator will check whether the two given operand values are equal or not.
        If equal returns false else returns true.

     3) Less than (<):
        This Operator is used to return true if the left-hand side operand value is less than the right-hand side operand value.
        For example, 5<3 is evaluated to be false. So, this Less than (<) operator will check whether the first operand value is less than the second
        operand value or not. If so, returns true else returns false.

     4) Less than or equal to (<=):
        This Operator is used to return true if the left-hand side operand value is less than or equal to the right-hand side operand value.
        For example, 5<=5 is evaluated to be true. So. this Less than or equal to (<=) operator will check whether the first operand value is less than or
        equal to the second operand value. If so returns true else returns false.

     5) Greater than (>):
        This Operator is used to return true if the left-hand side operand value is greater than the right-hand side operand value. 
        For example, 5>3 is evaluated to be true. So, this Greater than (>) operator will check whether the first operand value is greater than the second
        operand value. If so, returns true else return false.

     6) Greater than or Equal to (>=):
        This Operator is used to return true if the left-hand side operand value is greater than or equal to the right-hand side operand value.
        For example, 5>=5 is evaluated to be true. So, this Greater than or Equal to (>=) operator will check whether the first operand value is greater
        than or equal to the second operand value. If so, returns true else returns false.

  Logical Operators in C#:
    The Logical Operators are mainly used in conditional statements and loops for evaluating a condition. These operators are going to work with boolean
    expressions. The different types of Logical Operators supported in C# are as follows:

    1) Logical OR (||):
       This operator is used to return true if either of the Boolean expressions is true.
       For example, false || true is evaluated to be true. That means the Logical OR (||) operator returns true when one (or both) of the conditions in the
       expression is satisfied. Otherwise, it will return false.
       For example, a || b returns true if either a or b is true. Also, it returns true when both a and b are true.

    2) Logical AND (&&):
       This operator is used to return true if all the Boolean Expressions are true. For example, false && true is evaluated to be false. That means the
       Logical AND (&&) operator returns true when both the conditions in the expression are satisfied. Otherwise, it will return false.
       For example, a && b return true only when both a and b are true.

    3) Logical NOT (!):
       This operator is used to return true if the condition in the expression is not satisfied. Otherwise, it will return false.
       For example, !a returns true if a is false.

  Bitwise Operators in C#:
    The Bitwise Operators in C# perform bit-by-bit processing. They can be used with any of the integer (short, int, long, ushort, uint, ulong, byte) types.
    The different types of Bitwise Operators supported in C# are as follows.
    
    1) Bitwise OR (|)
       Bitwise OR operator is represented by |. This operator performs the bitwise OR operation on the corresponding bits of the two operands involved in
       the operation. If either of the bits is 1, it gives 1. If not, it gives 0.
       For example,
       int a=12, b=25;
       int result = a|b; //29
       How?
       12 Binary Number: 00001100
       25 Binary Number: 00011001
       Bitwise OR operation between 12 and 25:
       00001100
       00011001
       ========
       00011101 (it is 29 in decimal)
       Note: If the operands are of type bool, the bitwise OR operation is equivalent to the logical OR operation between them.
      
    2) Bitwise AND (&):
       Bitwise OR operator is represented by &. This operator performs the bitwise AND operation on the corresponding bits of two operands involved in the
       operation. If both of the bits are 1, it gives 1. If either of the bits is not 1, it gives 0.
       For example,
       int a=12, b=25;
       int result = a&b; //8
       How?
       12 Binary Number: 00001100
       25 Binary Number: 00011001
       Bitwise AND operation between 12 and 25:
       00001100
       00011001
       ========
       00001000 (it is 8 in decimal)

    3) Bitwise XOR (^):
       The bitwise OR operator is represented by ^. This operator performs a bitwise XOR operation on the corresponding bits of two operands. If the
       corresponding bits are different, it gives 1. If the corresponding bits are the same, it gives 0.
       For example,
       int a=12, b=25;
       int result = a^b; //21
       How?
       12 Binary Number: 00001100
       25 Binary Number: 00011001
       Bitwise AND operation between 12 and 25:
       00001100
       00011001
       ========
       00010101 (it is 21 in decimal)
       Note: If the operands are of type bool, the bitwise AND operation is equivalent to the logical AND operation between them.

  Unary Operators in C#:
    The Unary Operators in C# need only one operand. They are used to increment or decrement a value. There are two types of Unary Operators. They are as follows:
    1) Increment operators (++): Example: (++x, x++)
    2) Decrement operators (–): Example: (–x, x–)

    Increment Operator (++) in C# Language:
    The Increment Operator (++) is a unary operator. It operates on a single operand only. Again, it is classified into two types:
    1) Post-Increment Operator
    2) Pre-Increment Operator

    Post Increment Operators:
      The Post Increment Operators are the operators that are used as a suffix to its variable. It is placed after the variable.
      For example, a++ will also increase the value of the variable a by 1.
      Syntax: Variable++;
      Example: x++;
 
   Pre-Increment Operators:
     The Pre-Increment Operators are the operators which are used as a prefix to its variable. It is placed before the variable. 
     For example, ++a will increase the value of the variable a by 1.
     Syntax: ++Variable;
     Example: ++x;

  Decrement Operators in C# Language:
    The Decrement Operator (–) is a unary operator. It takes one value at a time. It is again classified into two types. They are as follows:
    1) Post Decrement Operator
    2) Pre-Decrement Operator

    Post Decrement Operators:
      The Post Decrement Operators are the operators that are used as a suffix to its variable. It is placed after the variable.
      For example, a– will also decrease the value of the variable a by 1.
      Syntax: Variable–;
      Example: x–;

     Pre-Decrement Operators:
       The Pre-Decrement Operators are the operators that are a prefix to its variable. It is placed before the variable. 
       For example, –a will decrease the value of the variable a by 1.
       Syntax: –Variable;
       Example: —x;

    Five Steps to Understand How the Unary Operators Works in C#?
      I see, many of the students and developers getting confused when they use increment and decrement operators in an expression. To make you understand 
      how exactly the unary ++ and — operators work in C#, we need to follow 5 simple steps. The steps are shown in the below diagram.
      pre Increment/Post Increment
                   |
             Substitution
                   |
             Evaluation
                   |
             Assignment
                   |
      Post Increment/Post Decrement

    Step 1: If there is some pre-increment or pre-decrement in the expression, that should execute first.
    Step 2: The second step is to substitute the values in the expression.
    Step 3: In the third step we need to evaluate the expression.
    Step 4: In the fourth step Assignment needs to be performed.
    Step 5: The final step is to perform post-increment or post-decrement.

  Ternary Operator in C#
    The Ternary Operator in C# is also known as the Conditional Operator (?:). It is actually the shorthand of the if-else statement. It is called ternary
    because it has three operands or arguments. The first argument is a comparison argument, the second is the result of a true comparison, and the third is
    the result of a false comparison.
    Syntax: Condition? first_expression : second_expression;
    The above statement means that first, we need to evaluate the condition. If the condition is true the first_expression is executed and becomes the
    result and if the condition is false, the second_expression is executed and becomes the result.
